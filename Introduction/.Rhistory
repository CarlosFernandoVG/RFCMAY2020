library(emo)
=emo
?emo
??emo
??emoji
emo::ji(":(")
emo::ji("sad")
+ Existen muchos libros y gratis: Aquí hay [uno](https://cran.r-project.org/doc/contrib/Santana_El_arte_de_programar_en_R.pdf)
+ Existen muchas formas de transmitir información con R: Markdown (HTML, Word, PDF), Shiny, Bookdowns, etc..
+ Aquí les dejo algunos bookdonws que puede estar visitando continuamente:
+ [R para Ciencia de Datos](https://es.r4ds.hadley.nz)
+ []
emo::ji("man_shrugging")
emo::ji("bowing_man")
myimages<-list.files("Images/RStudio/", pattern = ".png", full.names = TRUE)
include_graphics(myimages)
??include_graphics
library(knitr)
myimages<-list.files("Images/RStudio/", pattern = ".png", full.names = TRUE)
include_graphics(myimages)
?'['
myimages<-list.files("Images/Packages/", pattern = ".png", full.names = TRUE)
include_graphics(myimages)
# Comúnes
class(TRUE)
class(42)
class(42L)
class("42")
# Raros
class(charToRaw("B"))
class(4 + 2i)
numeric
?`numeric-class`
is(34b)
?is()
?mode
?typeof()
?mode
typeof(TRUE)
typeof(42)
typeof(42L)
typeof("42")
typeof(charToRaw("B"))
typeof(4 + 2i)
class(1:5)
typeof(1:5)
typeif(1.5:5.5)
class(1:5)
typeof(1:5)
class(1.5:5.5)
typeof(1.5:5.5)
.Machine$integer.max
.Machine$double.xmax
c(.Machine$double.xmin,.Machine$double.xmax)
paste(.Machine$double.xmin,.Machine$double.xmax)
paste(.Machine$double.xmin,.Machine$double.xmax, collapse = ",")
paste(.Machine$double.xmin,.Machine$double.xmax, sep = ", ")
paste("double: ",.Machine$double.xmin,.Machine$double.xmax, sep = ", ")
paste("double: ",.Machine$double.xmin, ", ",.Machine$double.xmax)
paste("interger: ",.Machine$integer.max,)
paste("interger: ",.Machine$integer.max)
paste("double: ",.Machine$double.xmin, ", ",.Machine$double.xmax)
paste("interger: ",.Machine$integer.max)
paste("double: ",.Machine$double.xmin, ", ",.Machine$double.xmax)
paste("interger: max:",.Machine$integer.max)
mode(TRUE)
mode(42)
mode(42L)
mode("42")
mode(charToRaw("B"))
mode(4 + 2i)
class(factor(1))
is.null(NULL)
is.null(NA)
1 == NULL
NA + 1
sum(c(1, 2, 3, NA), na.rm = TRUE)
na.fail(c(1, 2, 3, NA)) #¿Qué pasa con esto?
?na.fail
na.fail(c(1, 2, 3)) #¿Qué pasa con esto?
na.fail(c(1, 2, 3, NA)) #¿Qué pasa con esto?
logico <- TRUE
numerico <- 42
entero <- 42L
caracter <- "42"
crudo <- charToRaw("B")
complejo <- 4 + 2i
un.factor <- factor(1)
logical
numeric
integer
character
raw
complex
factor
c(1, 2.5, 4.5)
c(1L, 6L, 10L)
c(TRUE, FALSE, T, F)
c(TRUE, FALSE, 2)
c(TRUE, FALSE, 2, "")
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)
c(1, FALSE)
c("a", 1)
c(list(1), "a")
c(TRUE, 1L)
suppressMessages(library(dplyr))
suppressMessages(library(dplyr))
suppressMessages(library(readr))
suppressMessages(library(readxl))
suppressMessages(library(tidyr))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
head(diamonds)
str(diamonds)
# extraemos los primeros cinco renglones
diamonds[1:5, ]
# extraemos los primeros cinco renglones y las columnas 2,4,6
diamonds[1:5, c(2,4,6)]
do.call(do.something, args)
do.something <- function(x, y=1, ...) {
x + y + sum(...)
}
do.call(do.something, args)
args <- list(x=4, y=3, z=1)
do.call(do.something, args)
do.something <- function(x, y=1, ...) {
x + y + sum(...)
}
do.something(10, z=3, a=5)
args <- list(x=4, y=3, z=1)
do.call(do.something, args)
?do.call
?`[`
?class
?mode
1:5
1:1000000
(1:1000000)[7]
?seq()
1.5:4.5
factor(1:10)
knitr::opts_chunk$set(echo = TRUE)
x <- 110
y <- 20
x+y
x <- c(110, 23)
y <- 20
x+y
x <- c(110, 23)
y <- 20
x+y
factor(c("grande", "PEQUEÑO", "MEDIANO"))
x <- c(110, 23)
y <- 20
x+y
factor(c("grande", "PEQUEÑO", "MEDIANO"))
factor(c("grande", "PEQUEÑO", "MEDIAasdasNO")
x <- c(110, 23)
y <- 20
x+y
factor(c("grande", "PEQUEÑO", "MEDIANO"))
factor(c("grande", "PEQUEÑO", "MEDIAasdasNO"))
x <- c(110, 23)
y <- 20
x+y
factor(c("grande", "PEQUEÑO", "MEDIANO"))
factor(c("grande", "PEQUEÑO", "MEDIAasdasNO"))
factor(c(9,8,7,6,5,4,3,2,1))
?na.fail
na.fail(c(1, 2, 3)) #¿Qué pasa con esto?
na.fail(c(1, 2, 3, NA)) #¿Qué pasa con esto?
sum
x
length(x)
str(x)
attributes(x)
attributes(x) <- "este es un vector de prueba"
attributes(x) <- ñis("este es un vector de prueba"
attributes(x) <- list("este es un vector de prueba")
attributes(x) <- list(uno = "este es un vector de prueba")
attributes(x)
v <- 1:1000
v[20:30]
pesos <- c(10,20,30)
names(pesos)
names(pesos) <- c("melon","papaya", "sandia")
str(pesos)
pesos[["sandia]]
pesos[["sandia"]]
l <- list(vector = 1:50, lista = list(vectro_1 = 1:10, vectro_2 = 10:20))
l
l$vector
l$lista
l$lista$vectro_1
l$lista$vectro_2
length(l)
l$"tre" <- º:3
l$"tre" <- 1:3
length(l)
l
v
pesos
pesos$melon
pesos["melon"]
pesos["melon"] <- NULL
pesos <- pesos[-"melon"]
pesos <- pesos[[-"melon"]]
pesos <- pesos[-c("melon")]
pesos <- pesos[-c("melon")]
pesos <- pesos[c("sandia","melon")]
pesos
pesos[1]
pesos[-1]
pesos
pesos[-1]
pesos[-2]
l
is.list(l)
library(tidyverse)
l %>% is.list()
l
unlist(l)
str(unlist(l))
vl <- unlist(l)
typeof(vl)
typeof(vl)
str(vl)
as.vector(l)
1=="1"
-1<FALSE
"one"<2
"1"<2
